import groovy.json.JsonSlurper

apply from: "$rootProject.projectDir/build_kotlin.gradle"

def deleteme2113

class Utility {
  static _blendConfig
  static getAssetConfig = { projectDir ->
    if (_blendConfig)
      return _blendConfig

    def configFile = new File("$projectDir/config/config.json")
    _blendConfig = new JsonSlurper().parseText(configFile.text)
    return _blendConfig
  }
}

class ModelAssetsTask28 extends DefaultTask {

  @InputFiles
  def FileCollection inputFiles

  @Input
  def File _projectDir

  @OutputDirectory
  public File getOutputDir() { return new File("$_projectDir/src/main/resources/models") }

  @TaskAction
  void execute(IncrementalTaskInputs inputs) {
    println inputs.incremental ? 'CHANGED inputs considered out of date'
        : 'ALL inputs considered out of date'

    def config = Utility.getAssetConfig(_projectDir)
    def executablePath = config.paths.blender28 ?: config.paths.blender 
    inputs.outOfDate { change ->
      println "out of date: ${change.file.name}"
      def scriptPath = "$_projectDir/blend/scripts/export-2.8.py"
      def proc = [executablePath, change.file.absolutePath, '--background', '--python', scriptPath].execute()
      def sout = new StringBuilder(), serr = new StringBuilder()
      proc.consumeProcessOutput(sout, serr)
      proc.waitFor()
      println "out> $sout err> $serr"
    }

    inputs.removed { change ->
      println "removed: ${change.file.name}"
    }
  }
}

class TextureAssetsTask extends DefaultTask {

  @InputFiles
  def FileCollection inputFiles

  def File _projectDir

  @OutputDirectory
  def File getOutputDir() { return new File("$_projectDir/src/main/resources/textures") }

  @TaskAction
  void execute(IncrementalTaskInputs inputs) {
    println inputs.incremental ? 'CHANGED inputs considered out of date'
        : 'ALL inputs considered out of date'
    def config = Utility.getAssetConfig(_projectDir)
    def executablePath = config.paths.python
    def args = [executablePath, "$_projectDir/scripts/textures.py"]
    inputs.outOfDate { change ->
      def filename = change.file.name
      args.add filename[0..<filename.lastIndexOf('.')]
      println "out of date: ${filename}"
    }
    def proc = args.execute()
    def sout = new StringBuilder(), serr = new StringBuilder()
    proc.consumeProcessOutput(sout, serr)
    proc.waitFor()
    println sout
    if (serr) println "err>($serr)."
    
    inputs.removed { change ->
      println "removed: ${name}"
    }
  }
}

task modelAssets28(type: ModelAssetsTask28) {
  inputFiles = fileTree("$projectDir/blend/models").matching { include '**/*.blend'}
  _projectDir = projectDir
}

task textureAssets(type: TextureAssetsTask) {
  inputFiles = fileTree("$projectDir/textures").matching { include '**/*.ffxml'}
  _projectDir = projectDir
}

classes {
//  dependsOn modelAssets
  dependsOn modelAssets28
  dependsOn textureAssets
}
