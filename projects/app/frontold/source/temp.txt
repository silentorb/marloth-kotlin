  void _convert_mesh(const sculpting::Half_Edge_Mesh &mesh, Vertex_Schema &vertex_schema,
                     const sculpting::Face_Info_Map<sculpting::Color_Info> &details,
                     modeling::Mesh_Export &result) {
    auto vertex_count = get_vertex_count(mesh);
    auto vertices = new float[vertex_count * vertex_schema.get_vertex_size()];
    auto offsets = new int[mesh.get_face_count()];
    auto counts = new int[mesh.get_face_count()];
    float *value = &vertices[0];
    int *offset_pointer = &offsets[0];
    int *count_pointer = &counts[0];
    int offset = 0;
    bool has_opacity = false;

    for (auto &polygon : mesh.getFaces()) {
//      auto &detail = details.at(&polygon);
      sculpting::query::Simple_Face_Iterator it(polygon);
      do {
        auto &edge = it.get();

        auto vertex = edge.vertex;

        // Copy position
        *((sculpting::Vec3 *) value) = vertex->position;
        value += 3;

        // Temporary normal code
        *((sculpting::Vec3 *) value) = vertex->position;
        value += 3;

        // Temporary color code
        *((glm::vec4 *) value) = glm::vec4(0.5, 0.5, 0, 1);
        value += 4;

      } while (it.next());
//      for (int j = 0; j < sculpting::query::vertex_count(polygon); ++j) {
//        auto vertex = polygon.vertices[j];
//        *((sculpting::Vec3 *) value) = vertex->get_position();
//        value += 3;
//        for (int i = 1; i < vertex_schema.get_attribute_count(); ++i) {
//          auto &attribute = vertex_schema.get_attribute(i);
//          float *data = polygon.get_data(attribute.get_id(), j);
//          if (!data) {
//            value += attribute.get_count();
//            continue;
//          }
//
//          if (attribute.get_name() == "color" && *(data + 3) != 1) {
//            has_opacity = true;
//          }
//
//          for (int k = 0; k < attribute.get_count(); ++k) {
//            *value++ = *data++;
//          }
//        }
//    }

      auto vertex_count = sculpting::query::vertex_count(polygon);
      *offset_pointer++ = offset;
      offset += vertex_count;

      *count_pointer++ = vertex_count;
    }

    result.initialize(
      mesh.get_face_count(),
      vertex_count,
      vertices,
      offsets,
      counts,
      has_opacity
    );
  }